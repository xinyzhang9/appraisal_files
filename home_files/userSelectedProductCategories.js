var consumersite;
(function (consumersite) {
    var UserSelectedProductCategoriesService = (function () {
        function UserSelectedProductCategoriesService($log, commonCalculatorSvc) {
            var _this = this;
            this.$log = $log;
            this.commonCalculatorSvc = commonCalculatorSvc;
            this.createViewModel = function (loan, applicationData, emailFormData, products) {
                var userSelectedProductCategoriesVM = new srv.cls.UserSelectedProductCategoriesViewModel();
                var wrappedLoan = { ref: loan.currentLoan() };
                userSelectedProductCategoriesVM.firstName = emailFormData.firstName;
                userSelectedProductCategoriesVM.lastName = emailFormData.lastName;
                userSelectedProductCategoriesVM.email = emailFormData.email;
                userSelectedProductCategoriesVM.borrowerUserAccountId = wrappedLoan.ref.active.getBorrower().userAccount.userAccountId;
                userSelectedProductCategoriesVM.additionalRecipients = emailFormData.additionalRecipients;
                userSelectedProductCategoriesVM.sendEmail = false;
                userSelectedProductCategoriesVM.companyProfileId = applicationData.companyProfile.companyProfileId;
                userSelectedProductCategoriesVM.channelId = wrappedLoan.ref.channelId;
                userSelectedProductCategoriesVM.divisionId = wrappedLoan.ref.divisionId;
                userSelectedProductCategoriesVM.branchId = wrappedLoan.ref.branchId;
                userSelectedProductCategoriesVM.conciergeId = wrappedLoan.ref.conciergeId;
                userSelectedProductCategoriesVM.loanId = wrappedLoan.ref.loanId;
                userSelectedProductCategoriesVM.hearAboutUs = wrappedLoan.ref.hearAboutUs;
                userSelectedProductCategoriesVM.refinancePurpose = 1;
                userSelectedProductCategoriesVM.propertyType = parseInt(wrappedLoan.ref.getSubjectProperty().propertyType);
                userSelectedProductCategoriesVM.occupancyType = wrappedLoan.ref.active.occupancyType;
                userSelectedProductCategoriesVM.numberOfUnits = wrappedLoan.ref.getSubjectProperty().numberOfUnits;
                userSelectedProductCategoriesVM.numberOfStories = wrappedLoan.ref.getSubjectProperty().numberOfStories;
                userSelectedProductCategoriesVM.impounds = parseInt(wrappedLoan.ref.otherInterviewData.selectedImpoundsOption);
                userSelectedProductCategoriesVM.decisionScore = _this.commonCalculatorSvc.GetLowestMiddleFicoScore(wrappedLoan, applicationData);
                userSelectedProductCategoriesVM.loanAmount = wrappedLoan.ref.loanAmount;
                userSelectedProductCategoriesVM.ltv = parseFloat(wrappedLoan.ref.getSubjectProperty().ltv);
                userSelectedProductCategoriesVM.cltv = parseFloat(wrappedLoan.ref.getSubjectProperty().cltv);
                userSelectedProductCategoriesVM.dti = wrappedLoan.ref.financialInfo.dti;
                userSelectedProductCategoriesVM.purchasePrice = wrappedLoan.ref.getSubjectProperty().purchasePrice;
                userSelectedProductCategoriesVM.estimatedValue = wrappedLoan.ref.getSubjectProperty().currentEstimatedValue;
                userSelectedProductCategoriesVM.cashout = wrappedLoan.ref.financialInfo.cashOutAmount;
                userSelectedProductCategoriesVM.stateName = wrappedLoan.ref.getSubjectProperty().stateName;
                userSelectedProductCategoriesVM.products = _this.convertToProductItemViewModels(products);
                return userSelectedProductCategoriesVM;
            };
            this.convertToProductItemViewModels = function (products) {
                var productItemViewModels = [];
                angular.forEach(products, function (product) {
                    var productItemViewModel = new srv.cls.ProductItemViewModel();
                    productItemViewModel.adjustedPoints = 0;
                    productItemViewModel.titleYears = 0;
                    productItemViewModel.adjustmentPeriod = product.adjustmentPeriod;
                    productItemViewModel.adjustments = [];
                    productItemViewModel.adjustmentSum = '';
                    productItemViewModel.amortizationType = product.amortizationType;
                    productItemViewModel.baseLoanAmount = product.baseLoanAmount;
                    productItemViewModel.breakEven = 0;
                    productItemViewModel.cashToFrom = 0;
                    productItemViewModel.closeDate = new Date();
                    productItemViewModel.closingCosts = product.totalEstimatedClosingCosts;
                    productItemViewModel.compare = product.compare;
                    var closingClost = new srv.cls.DetailedClosingCost();
                    closingClost.baseLoanAmount = product.baseLoanAmount;
                    closingClost.lenderCost = [];
                    closingClost.prepaidCosts = [];
                    closingClost.prepaidDescriptions = [];
                    closingClost.reservesAndPrepaids = product.reservesAndPrepaids;
                    closingClost.reservesCosts = [];
                    closingClost.reservesDescriptions = [];
                    closingClost.thirdPartyAndPrepaids = 0;
                    closingClost.thirdPartyCosts = [];
                    closingClost.thirdPartyPrepaidsAndReserves = product.totalThirdPartyCosts;
                    closingClost.totalEstimatedClosingCosts = product.totalEstimatedClosingCosts;
                    closingClost.totalLenderCosts = product.totalLenderCosts;
                    closingClost.totalLoanAmount = product.totalLoanAmount;
                    closingClost.totalPrepaids = product.totalPrepaids;
                    closingClost.totalReserves = product.totalReserves, closingClost.totalThirdPartyCosts = product.totalThirdPartyCosts;
                    closingClost.ufmipAddedToLoan = product.ufmipAddedToLoan;
                    closingClost.usdaAddedToLoan = 0;
                    closingClost.usdaGFeeAddedToLoan = product.usdaGFeeAddedToLoan;
                    closingClost.vaffAddedToLoan = product.vaffAddedToLoan;
                    productItemViewModel.costDetails = closingClost;
                    productItemViewModel.days = 0;
                    productItemViewModel.effectiveRate = 0;
                    productItemViewModel.fifteenYrSavings = 0;
                    productItemViewModel.firstPaymentAdjustmentMonths = 0;
                    productItemViewModel.fiveYrSavings = 0;
                    productItemViewModel.floorRate = 0;
                    productItemViewModel.indexType = '';
                    productItemViewModel.indexValue = 0;
                    productItemViewModel.investorName = '';
                    productItemViewModel.investorPointsAdjustment = 0;
                    productItemViewModel.isExpired = false;
                    productItemViewModel.isForLowFixedRate = false;
                    productItemViewModel.isForLowrateArm = false;
                    productItemViewModel.lifeOfLoanSavings = 0;
                    productItemViewModel.loanAmortizationFixedTerm = product.titleYears;
                    productItemViewModel.loanAmortizationTerm = product.loanAmortizationTerm;
                    productItemViewModel.loanOptionType = product.loanOptionType;
                    productItemViewModel.loanPurpose = 0;
                    productItemViewModel.margin = 0;
                    productItemViewModel.minLenderCompCredit = 0;
                    productItemViewModel.monthlySavings = 0;
                    productItemViewModel.mortgageInsuranceType = 0;
                    productItemViewModel.mortgageType = product.mortgageType;
                    productItemViewModel.notes = [];
                    productItemViewModel.originalPricingQuery = '';
                    productItemViewModel.paymentBreakdownModalVM;
                    var paymentBreakdownModalVM = new srv.cls.PaymentBreakdownModalViewModel();
                    paymentBreakdownModalVM.apr = product.apr;
                    paymentBreakdownModalVM.hoa = 0;
                    paymentBreakdownModalVM.insuranceMonthlyAmount = 0;
                    paymentBreakdownModalVM.insuranceMonthlyAmountPercent = 0;
                    paymentBreakdownModalVM.isMI = false;
                    paymentBreakdownModalVM.mip = 0;
                    paymentBreakdownModalVM.mipPercent = 0;
                    paymentBreakdownModalVM.principalAndInterest = product.monthlyPayment;
                    paymentBreakdownModalVM.taxesMonthlyAmount = 0;
                    paymentBreakdownModalVM.taxesMonthlyAmountPercent = 0;
                    paymentBreakdownModalVM.totalMonthlyPayment = product.monthlyPayment;
                    productItemViewModel.paymentBreakdownModalVM = paymentBreakdownModalVM;
                    productItemViewModel.paymentFrequency = 0;
                    productItemViewModel.priceAmount = 0;
                    productItemViewModel.pricePercentage = 0;
                    productItemViewModel.pricePoints = 0;
                    productItemViewModel.principalAndInterest = 0;
                    productItemViewModel.productId = product.productId;
                    productItemViewModel.productIdentifier = '';
                    productItemViewModel.productIndex = 0;
                    productItemViewModel.productName = '';
                    productItemViewModel.productType = '';
                    productItemViewModel.rate = product.rate;
                    productItemViewModel.rateAdjustmentFirstChangeCapRate = 0;
                    productItemViewModel.rateAdjustmentLifetimeCapPercent = 0;
                    productItemViewModel.rateAdjustmentSubsequentCapPercent = 0;
                    productItemViewModel.recoupTime = 0;
                    productItemViewModel.register = false;
                    productItemViewModel.sevenYrSavings = 0;
                    productItemViewModel.tenYrSavings = 0;
                    productItemViewModel.threeYrSavings = 0;
                    productItemViewModel.totalLoanAmount = 0;
                    productItemViewModel.twentyFiveYrSavings = 0;
                    productItemViewModels.push(productItemViewModel);
                });
                return productItemViewModels;
            };
        }
        UserSelectedProductCategoriesService.$inject = ['$log', 'commonCalculatorSvc']; // , 'private templateRoot: string'];
        UserSelectedProductCategoriesService.className = 'userSelectedProductCategoriesService';
        return UserSelectedProductCategoriesService;
    })();
    consumersite.UserSelectedProductCategoriesService = UserSelectedProductCategoriesService;
    moduleRegistration.registerService(consumersite.moduleName, UserSelectedProductCategoriesService);
})(consumersite || (consumersite = {}));
//# sourceMappingURL=userSelectedProductCategories.service.js.map